{
  "name": "Auto-Generate SEO Blog Posts with Perplexity, GPT, Leonardo & WordPress (Notion Integrated & Enhanced)",
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.perplexity.ai/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "perplexityApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "id": "01d0a3b7-66db-4032-b7d7-7a7b273920a7",
      "name": "Research Topic- Perplexity",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1040,
        240
      ],
      "typeVersion": 4.2,
      "credentials": {
        "perplexityApi": {
          "id": "FXTegunbEqdEVsDo",
          "name": "Perplexity account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini",
          "cachedResultName": "GPT-4.1-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Generate a single-line English description of an editorial-style image to visually represent the following article.\n\nThe image must follow these rules:\n- Cinematic, editorial look (not cartoonish or abstract).\n- No visible text or logos.\n- Must work for a blog post featured image in Google News and Discover (ideal size: 1200x628 px).\n- The article title is: \"{{ $json.title }}\"\n- Article content: {{ $json.content }}.\n\nOutput just the English prompt, without quotes or formatting."
            },
            {
              "content": "You are an expert in crafting AI image generation prompts for editorial and news images. You help generate cinematic, editorial-style prompts for blog images that perform well in Google News and Google Discover. Avoid any text or logos in the result.",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "id": "b306aff7-c8b0-4bf7-9eb1-d8eeee45da6e",
      "name": "Message a model",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "position": [
        1480,
        240
      ],
      "typeVersion": 1.8,
      "credentials": {
        "openAiApi": {
          "id": "2xzsv5eH6TgDfiIU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Disposition",
              "value": "=attachment; filename=\"{{ $('Get Title, Content, and Image FileName').item.json.image_filename }}\""
            },
            {
              "name": "Content-Type",
              "value": "image/jpeg"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "data",
        "options": {}
      },
      "id": "e3786cd7-baac-4e9e-bd45-63ec3b5cfd5e",
      "name": "Upload Image to Wordpress",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2720,
        400
      ],
      "retryOnFail": true,
      "typeVersion": 4.2,
      "credentials": {
        "httpBasicAuth": {
          "id": "HOjILsqNKBuOa1Pg",
          "name": "Unnamed credential"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "132de601-8ca1-46b4-9ae3-67baa33f28ad",
              "operator": {
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "={{ $json.generations_by_pk.status }}",
              "rightValue": "COMPLETE"
            }
          ]
        },
        "options": {}
      },
      "id": "bd779c40-a90d-4412-935a-7adc30e431fc",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "position": [
        2280,
        190
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {},
      "id": "24b8ff73-0eff-41ce-b99b-27d4210838ac",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "position": [
        2500,
        190
      ],
      "webhookId": "d14af83a-15dc-4387-adf9-0f8b785faa0c",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "url": "=https://cloud.leonardo.ai/api/rest/v1/generations/{{ $json.sdGenerationJob.generationId }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "072b61c5-7494-42cd-808f-bb311605f4a3",
      "name": "Get Leonardo Image Status",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2060,
        240
      ],
      "retryOnFail": true,
      "typeVersion": 4.2,
      "credentials": {
        "httpBearerAuth": {
          "id": "TPU7gBiDjPMEe5jX",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.generations_by_pk.generated_images[0].url }}",
        "options": {}
      },
      "id": "da14ecc4-ca0f-445e-9c87-0148a602bfc2",
      "name": "Get Leonardo Image",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2500,
        390
      ],
      "retryOnFail": true,
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://cloud.leonardo.ai/api/rest/v1/generations",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"prompt\": \"{{ $json.message.content }}\",\n  \"modelId\": \"6bef9f1b-29cb-40c7-b9df-32b51c1f67d3\",\n  \"width\": 1280,\n  \"height\": 720,\n  \"sd_version\": \"v2\",\n  \"num_images\": 1,\n  \"promptMagic\": true,\n  \"promptMagicStrength\": 0.5,\n  \"public\": false,\n  \"scheduler\": \"LEONARDO\",\n  \"guidance_scale\": 7\n}",
        "options": {}
      },
      "id": "ce87f8ee-3d53-462c-9df5-921fdc42d17c",
      "name": "Leonardo: Create Post Image",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1840,
        240
      ],
      "retryOnFail": true,
      "typeVersion": 4.2,
      "credentials": {
        "httpBearerAuth": {
          "id": "TPU7gBiDjPMEe5jX",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const perplexityApiResponse = $input.first().json;\nconst incomingNotionData = $input.first().json; // Get the original data passed from 'Format Notion Content & Prepare Perplexity Prompt'\n\nconst parsedPerplexityData = JSON.parse(perplexityApiResponse.choices[0].message.content);\n\nconst blogTitle = parsedPerplexityData.title;\nconst blogContent = parsedPerplexityData.content;\nconst seoKeywords = parsedPerplexityData.keywords || '';\n\nlet citations = [];\nif (perplexityApiResponse.choices[0].citations && Array.isArray(perplexityApiResponse.choices[0].citations)) {\n  citations = perplexityApiResponse.choices[0].citations.map(citation => citation.url);\n}\nconst formattedCitations = citations.length > 0 ? citations.join('\\n') : '';\n\nfunction toSlug(text) {\n  return text\n    .toLowerCase()\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\")\n    .replace(/[^a-z0-9\\s-]/g, \"\")\n    .replace(/\\s+/g, \"-\")\n    .replace(/-+/g, \"-\")\n    .replace(/^-|-$/g, \"\");\n}\n\nconst imageName = toSlug(blogTitle) + \".jpg\";\n\nreturn [\n  {\n    json: {\n      title: blogTitle,\n      content: blogContent,\n      image_filename: imageName,\n      citations_list: formattedCitations,\n      seo_keywords: seoKeywords\n    }\n  }\n];"
      },
      "id": "c8e83410-b334-4c2e-8095-0d424dd8455f",
      "name": "Get Title, Content, and Image FileName",
      "type": "n8n-nodes-base.code",
      "position": [
        1260,
        240
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "content": "## Problem in node 'Get Title, Content, and Image FileName'\nIf this happens, is because the Json file was not created successfully before on Perplexity. IA Models still struggles with this.",
        "height": 260
      },
      "id": "611ebda2-da9a-4104-9888-5934afbfbe3d",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        760,
        430
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## ALT Images \nALT text is still one of the most important SEO features, along with the image's filename.\n"
      },
      "id": "0f807531-ad62-40a8-8778-a4f7dcfc3c63",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2420,
        590
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Image Generation with LeonardoAI\nThe image generation process is asynchronous, so we have to check periodically to see if it's ready. A few seconds is more than enough for the interval; any less and you might get blocked by the API.\n",
        "height": 120,
        "width": 540
      },
      "id": "23f62c23-08c5-4da9-8579-a4b1077b43e1",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1620,
        620
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Image Prompt\nWe ask ChatGPT to help us generate the prompt we will use in LeonardoAI for the image. While we could use OpenAI for the image, Leonardo is considerably cheaper.\n",
        "height": 200
      },
      "id": "56512471-538c-478f-9406-685f8501a8aa",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1060,
        480
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## We Publish\nWe create the publication, including the image and category."
      },
      "id": "24dd4040-a12b-4edc-a36f-668b1e4b6ab4",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2660,
        200
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Journal\nWe generated a list of the posts we've made through this flow."
      },
      "id": "4dee076b-728a-42eb-b1ba-a8adfae043b5",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2920,
        590
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://cristiantala.com/wp-json/wp/v2/media/{{ $json.id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "alt_text",
              "value": "={{ $('Message a model').item.json.message.content }}"
            }
          ]
        },
        "options": {}
      },
      "id": "02b052f2-0771-42b3-b4e8-526375654118",
      "name": "Add ALT to Image",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2940,
        400
      ],
      "retryOnFail": true,
      "typeVersion": 4.2,
      "credentials": {
        "httpBasicAuth": {
          "id": "HOjILsqNKBuOa1Pg",
          "name": "Unnamed credential"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://cristiantala.com/wp-json/wp/v2/posts",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "title",
              "value": "={{ $('Get Title, Content, and Image FileName').item.json.title }}"
            },
            {
              "name": "content",
              "value": "={{ $('Get Title, Content, and Image FileName').item.json.content }}"
            },
            {
              "name": "status",
              "value": "publish"
            },
            {
              "name": "featured_media",
              "value": "={{ $('Upload Image to Wordpress').item.json.id }}"
            },
            {
              "name": "categories",
              "value": "1"
            }
          ]
        },
        "options": {}
      },
      "id": "3160aa22-c7f5-4c8e-8a1c-9f2b0e4d5c6e",
      "name": "Create WordPress Post",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        3160,
        400
      ],
      "retryOnFail": true,
      "typeVersion": 4.2,
      "credentials": {
        "httpBasicAuth": {
          "id": "HOjILsqNKBuOa1Pg",
          "name": "Unnamed credential"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "mode": "list",
          "value": "[YOUR_GOOGLE_SHEET_DOCUMENT_ID]",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/[YOUR_GOOGLE_SHEET_DOCUMENT_ID]/edit?usp=drivesdk",
          "cachedResultName": "Automated Blog Post Log"
        },
        "sheetName": {
          "__rl": true,
          "mode": "list",
          "value": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/[YOUR_GOOGLE_SHEET_DOCUMENT_ID]/edit#gid=0",
          "cachedResultName": "Sheet1"
        },
        "columns": {
          "value": {
            "URL": "={{ $json.guid.raw }}",
            "Type": "Post WP",
            "Topic": "={{ $('Get Title, Content, and Image FileName').item.json.title }}",
            "Status": "Posted",
            "Image URL": "={{ $('Upload Image to Wordpress').item.json.guid.rendered }}",
            "AI Content": "={{ $('Get Title, Content, and Image FileName').item.json.content }}",
            "Post Date": "={{ $json.date }}",
            "SEO Keywords": "={{ $('Get Title, Content, and Image FileName').item.json.seo_keywords }}",
            "Citations List": "={{ $('Get Title, Content, and Image FileName').item.json.citations_list }}"
          },
          "schema": [
            {
              "id": "URL",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "URL",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Type",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "Type",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Topic",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "Topic",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Status",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "Status",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Image URL",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "Image URL",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "AI Content",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "AI Content",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Post Date",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "Post Date",
              "defaultMatch": false,
